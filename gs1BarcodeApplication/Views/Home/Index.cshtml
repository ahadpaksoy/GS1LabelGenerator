@model List<gs1BarcodeApplication.Models.ProductLabelModel>
@{
    ViewBag.Title = "GS1 Generator";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>GS1 Label Generator</title>
    <link rel="apple-touch-icon" sizes="180x180" href="images/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="images/favicon-16x16.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body.dark-mode {
            background-color: #121212 !important;
            color: #e0e0e0 !important;
        }

            body.dark-mode .card {
                background-color: #1e1e1e !important;
                color: #e0e0e0 !important;
            }

            body.dark-mode .form-control, body.dark-mode .form-control:read-only {
                background-color: #333 !important;
                color: #eee !important;
                border-color: #555 !important;
            }

            body.dark-mode .btn-outline-primary, body.dark-mode .btn-outline-success, body.dark-mode .btn-secondary, body.dark-mode .btn-outline-info {
                color: #bbb !important;
                border-color: #666 !important;
            }

                body.dark-mode .btn-outline-primary:hover, body.dark-mode .btn-outline-success:hover, body.dark-mode .btn-secondary:hover, body.dark-mode .btn-outline-info:hover {
                    background-color: #444 !important;
                    border-color: #888 !important;
                }

        .form-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .field-row {
            justify-content: center;
            align-items: center;
            max-width: 800px;
            width: 100%;
        }

        #inputList {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #gs1StringPreview {
            white-space: pre-wrap;
            word-break: break-all;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container py-5">
        <div class="card shadow p-4 position-relative">
            <button id="darkModeToggle" class="btn btn-sm btn-outline-secondary position-absolute" style="top: 1rem; right: 1rem;">
                🌙
            </button>
            <h2 class="mb-4 text-center">📦 GS1 Label Builder</h2>
            <div class="form-container">
                <div class="mb-3 d-flex justify-content-center align-items-center gap-3">
                    <select id="presetSelector" class="form-select w-auto">
                        <option value="">-- Select a Template --</option>
                        @if (ViewBag.Presets != null)
                        {
                            foreach (var preset in (Dictionary<string, List<string>>)ViewBag.Presets)
                            {
                                <option value="@preset.Key">@preset.Key</option>
                            }
                        }
                    </select>
                    <span>OR</span>
                    <label for="jsonUpload" class="btn btn-outline-info btn-sm">Upload File</label>
                    <input type="file" id="jsonUpload" accept=".json" style="display: none;" />
                </div>
                <form method="post" action="/Home/Submit" id="gs1Form" novalidate>
                    @Html.AntiForgeryToken()
                    <div id="inputList" class="mb-4"></div>
                    <div class="text-center mb-3">
                        <button type="submit" class="btn btn-outline-success">✅ Generate Label & PDF</button>
                    </div>
                </form>
                <hr />
                <div id="previewSection" style="display: none;">
                    <h4 class="text-center">Live Preview</h4>
                    <div class="mt-3">
                        <!-- GS1 String (full width) -->
                        <div class="mb-3">
                            <strong>GS1 String:</strong>
                            <pre id="gs1StringPreview" class="p-2 border rounded"></pre>
                        </div>
                        <!-- QR Code (centered) -->
                        <div class="mb-3 text-center">
                            <strong>QR Code:</strong><br />
                            <div id="qrCodePreview" class="p-2 border rounded d-inline-block bg-white"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="resultModal" tabindex="-1" aria-labelledby="resultModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resultModalLabel">Generated GS1 Label</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <img id="modalBarcodeImage" src="" class="img-fluid" style="max-width: 400px; height: 100px;" alt="Barcode" />
                    </div>
                    <div class="row align-items-center">
                        <div class="col-md-9">
                            <strong>GS1 Data String:</strong>
                            <pre id="modalGs1String" class="p-2 border rounded" style="white-space: pre-wrap; word-break: break-all;"></pre>

                            <strong>Data Summary:</strong>
                            <div id="modalSummaryTableContainer" style="max-height: 200px; overflow-y: auto;">
                                <!-- The summary table will be generated here by JavaScript -->
                            </div>
                        </div>
                        <div class="col-md-3 text-center">
                            <strong>QR Code:</strong><br />
                            <img id="modalQrImage" src="" class="img-fluid" alt="QR Code" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="downloadPdfButton">Download PDF</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Modal -->

    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="errorModalLabel">An Error Occurred</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="errorModalMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // --- DATA AND CONFIGURATION ---
        let counter = 0;
        let qrCodeInstance = null;

        const presets = @Html.Raw(Json.Encode(ViewBag.Presets ?? new Dictionary<string, List<string>>()));

        // --- VALIDATION RULES (RESTORED) ---
        const fieldValidationRules = {
            sscc: { pattern: /^\d{18}$/, message: "SSCC must be exactly 18 digits." },
            GTIN: { customValidator: validateGTIN, message: "Invalid GTIN. Check length and check digit." },
            gtinContained: { customValidator: validateGTIN, message: "Invalid GTIN. Check length and check digit." },
            batch_lotNumber: { pattern: /^[a-zA-Z0-9-]{1,20}$/, message: "Must be 1-20 alphanumeric characters." },
            serialNumber: { pattern: /^[a-zA-Z0-9]{1,20}$/, message: "Must be 1-20 alphanumeric characters." },
            productionDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            dueDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            packDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            bestBeforeDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            expirationDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            customerPONumber: { pattern: /^[a-zA-Z0-9-]{1,30}$/, message: "PO Number must be 1-30 alphanumeric characters or hyphens." },
            gsin: { pattern: /^\d{17}$/, message: "GSIN must be exactly 17 digits." },
            shelfLifeDuration: { pattern: /^\d{1,6}$/, message: "Must be 1-6 digits." },
        };

        // --- VALIDATION FUNCTIONS (RESTORED) ---
        function validateGTIN(gtin) {
            if (!/^\d{8}$|^\d{12}$|^\d{13}$|^\d{14}$/.test(gtin)) return false;
            const a = gtin.slice(0, -1).split('').map(char => parseInt(char, 10));
            const checkDigit = parseInt(gtin.slice(-1), 10);
            let sum = 0;
            a.reverse().forEach((digit, i) => { sum += digit * (i % 2 === 0 ? 3 : 1); });
            return checkDigit === (10 - (sum % 10)) % 10;
        }

        function isValidYYMMDD(value) {
            if (!/^\d{6}$/.test(value)) return false;
            const year = parseInt(value.slice(0, 2), 10) + 2000;
            const month = parseInt(value.slice(2, 4), 10);
            const day = parseInt(value.slice(4, 6), 10);
            if (month < 1 || month > 12) return false;
            const lastDayOfMonth = new Date(year, month, 0).getDate();
            return !(day < 1 || day > lastDayOfMonth);
        }

        function validateInput(input, fieldName) {
            const value = input.value.trim();
            const msg = input.parentNode.querySelector('.validation-msg');
            const rules = fieldValidationRules[fieldName];
            if (!rules) {
                msg.style.display = "none";
                input.classList.remove("is-invalid");
                return;
            }
            let isValid = true;
            let validationMessage = rules.message || "Invalid format.";
            if (rules.customValidator) {
                isValid = rules.customValidator(value);
            } else if (rules.pattern) {
                isValid = rules.pattern.test(value);
            }
            if (!isValid) {
                msg.innerText = validationMessage;
                msg.style.display = "block";
                input.classList.add("is-invalid");
            } else {
                msg.style.display = "none";
                input.classList.remove("is-invalid");
            }
        }

        // --- CORE UI FUNCTIONS ---
        function buildFormForPreset(presetName) {
            const inputList = document.getElementById('inputList');
            inputList.innerHTML = "";
            if (!presetName) {
                updatePreview();
                return;
            }
            const fieldsForPreset = presets[presetName];
            if (!fieldsForPreset) return;
            counter = 0;
            fieldsForPreset.forEach(fieldValue => {
                const fieldInfo = gs1Options.find(opt => opt.value === fieldValue);
                if (!fieldInfo) return;
                const div = document.createElement('div');
                div.className = "row g-2 align-items-center mb-3 field-row";
                div.setAttribute('data-index', counter);
                const labelHTML = `<div class="col-md-5"><input type="text" class="form-control" value="${fieldInfo.text}" readonly title="${fieldInfo.tooltip || ''}"/><input type="hidden" name="inputs[${counter}].Field" value="${fieldInfo.value}" /></div>`;
                const inputHTML = `<div class="col-md-7"><input type="text" class="form-control" name="inputs[${counter}].Value" placeholder="Enter value" data-field="${fieldValue}" oninput="validateInput(this, '${fieldValue}'); updatePreview()" /><small class="text-danger validation-msg" style="display:none"></small></div>`;
                div.innerHTML = labelHTML + inputHTML;
                inputList.appendChild(div);
                counter++;
            });
            updatePreview();
        }

        // Updates the preview in real time.
        function updatePreview() {
            const previewSection = document.getElementById('previewSection');
            const inputs = document.querySelectorAll('#inputList input[data-field]');

            if (inputs.length === 0) {
                previewSection.style.display = 'none';
                return;
            }

            const parts = [];
            inputs.forEach(input => {
                const fieldName = input.getAttribute('data-field');
                const value = input.value.trim();
                const fieldInfo = gs1Options.find(opt => opt.value === fieldName);
                if (value && fieldInfo) {
                    const aiMatch = fieldInfo.text.match(/\((\d+)\)$/);
                    if (aiMatch) {
                        const ai = aiMatch[1];
                        parts.push(`(${ai})${value}`);
                    }
                }
            });

            // GS1 Label
            const gs1Data = parts.join('');



            const gs1StringElem = document.getElementById('gs1StringPreview');
            const qrCodeDiv = document.getElementById('qrCodePreview');


            gs1StringElem.textContent = gs1Data;
            qrCodeDiv.innerHTML = '';

            if (gs1Data) {
                previewSection.style.display = 'block';


                new QRCode(qrCodeDiv, {
                    text: gs1Data,
                    width: 128,
                    height: 128,
                    correctLevel: QRCode.CorrectLevel.Q
                });

            } else {

                previewSection.style.display = 'none';
            }
        }

        // --- EVENT LISTENERS ---
        document.getElementById('presetSelector').addEventListener('change', function () {
            buildFormForPreset(this.value);
        });

        document.getElementById('jsonUpload').addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (!file) return;
            const reader = new FileReader();
            reader.onload = function (e) {
                try {
                    const uploadedPresets = JSON.parse(e.target.result);
                    const selector = document.getElementById('presetSelector');
                    for (const presetName in uploadedPresets) {
                        if (!presets[presetName]) {
                            presets[presetName] = uploadedPresets[presetName];
                            const option = document.createElement('option');
                            option.value = presetName;
                            option.textContent = presetName + " (Uploaded)";
                            selector.appendChild(option);
                        }
                    }
                    alert(Object.keys(uploadedPresets).length + ' preset(s) loaded successfully!');
                } catch (error) {
                    alert('Error parsing JSON file: ' + error.message);
                }
            };
            reader.readAsText(file);
            event.target.value = '';
        });

        document.getElementById('gs1Form').addEventListener('submit', function (e) {
            e.preventDefault();

            let isFormValid = true;
            const inputs = document.querySelectorAll('#inputList input[data-field]');

            if (inputs.length === 0) {

                showErrorModal('Please select a template to generate a label.');
                return;
            }

            for (let input of inputs) {
                const fieldName = input.getAttribute('data-field');
                validateInput(input, fieldName);
                if (input.classList.contains('is-invalid') || input.value.trim() === '') {
                    isFormValid = false;
                }
            }

            if (!isFormValid) {

                showErrorModal('Please fix all invalid or empty fields before submitting.');
                return;
            }

            const submitButton = e.target.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';

            const formData = new FormData(e.target);

            fetch('/Home/Submit', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        const contentType = response.headers.get("content-type");
                        if (contentType && contentType.indexOf("application/json") !== -1) {
                            return response.json().then(data => { throw new Error(data.message || 'An unknown error occurred.') });
                        } else {
                            return response.text().then(text => { throw new Error('Server returned an unexpected response. Please check the console for details.') });
                        }
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        document.getElementById('modalGs1String').textContent = data.gs1String;
                        document.getElementById('modalBarcodeImage').src = data.barcodeImage;
                        document.getElementById('modalQrImage').src = data.qrImage;
                        const tableContainer = document.getElementById('modalSummaryTableContainer');
                        tableContainer.innerHTML = buildSummaryTable(data.modelData);
                        const resultModal = new bootstrap.Modal(document.getElementById('resultModal'));
                        resultModal.show();
                        document.getElementById('downloadPdfButton').onclick = function () {
                            downloadPdf(data.gs1String, data.barcodeImage.replace("data:image/png;base64,", ""), data.qrImage.replace("data:image/png;base64,", ""));
                        };
                    } else {

                        showErrorModal('Error from server: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                    showErrorModal('An error occurred while communicating with the server:\n' + error.message);
                })
                .finally(() => {
                    submitButton.disabled = false;
                    submitButton.innerHTML = '✅ Generate Label & PDF';
                });
        });

        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', () => {
            // Fetch the GS1 definitions from our new API endpoint
            fetch('/api/gs1/definitions')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Could not load GS1 definitions from the server.');
                    }
                    return response.json();
                })
                .then(data => {
                    // Once loaded, store them in our global variable
                    gs1Options = data;
                    console.log('GS1 definitions loaded successfully.');
                })
                .catch(error => {
                    console.error(error);
                    showErrorModal(error.message);
                });

            // Initialize dark mode
            setDarkMode(localStorage.getItem('darkMode') === 'true');
        });

        const toggleBtn = document.getElementById('darkModeToggle');
        toggleBtn.addEventListener('click', () => {
            setDarkMode(!document.body.classList.contains('dark-mode'));
        });


        // --- FUNCTIONS ---

        function setDarkMode(enabled) {
            if (enabled) {
                document.body.classList.add('dark-mode');
                localStorage.setItem('darkMode', 'true');
                toggleBtn.textContent = '☀️';
            } else {
                document.body.classList.remove('dark-mode');
                localStorage.setItem('darkMode', 'false');
                toggleBtn.textContent = '🌙';
            }
        }
        function showErrorModal(message) {
            const modalMessageElement = document.getElementById('errorModalMessage');
            modalMessageElement.textContent = message;

            const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
            errorModal.show();
        }

        function buildSummaryTable(modelData) {
            let tableHtml = '<table class="table table-sm table-bordered"><tbody>';
            for (const key in modelData) {
                if (modelData[key]) { // Check if the property has a value
                    const fieldInfo = gs1Options.find(opt => opt.value === key);
                    const displayName = fieldInfo ? fieldInfo.text : key; // Use friendly name if available
                    tableHtml += `<tr><td class="w-50">${displayName}</td><td>${modelData[key]}</td></tr>`;
                }
            }
            tableHtml += '</tbody></table>';
            return tableHtml;
        }

        function downloadPdf(gs1String, barcodeBase64, qrBase64) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Home/ExportPdf';

            // --- ANTI-FORGERY TOKEN LOGIC ---

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const tokenField = document.createElement('input');
            tokenField.type = 'hidden';
            tokenField.name = '__RequestVerificationToken';
            tokenField.value = token;
            form.appendChild(tokenField);

            const params = {
                gs1String: gs1String,
                barcodeBase64: barcodeBase64.replace("data:image/png;base64,", ""),
                qrBase64: qrBase64.replace("data:image/png;base64,", "")
            };

            for (const key in params) {
                const hiddenField = document.createElement('input');
                hiddenField.type = 'hidden';
                hiddenField.name = key;
                hiddenField.value = params[key];
                form.appendChild(hiddenField);
            }

            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        }
    </script>
</body>
</html>