@model List<gs1BarcodeApplication.Models.ProductLabelModel>
@{
    ViewBag.Title = "GS1 Generator";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>GS1 Label Generator</title>
    <link rel="apple-touch-icon" sizes="180x180" href="images/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="images/favicon-16x16.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body.dark-mode {
            background-color: #121212 !important;
            color: #e0e0e0 !important;
        }

            body.dark-mode .card {
                background-color: #1e1e1e !important;
                color: #e0e0e0 !important;
            }

            body.dark-mode .form-control, body.dark-mode .form-control:read-only {
                background-color: #333 !important;
                color: #eee !important;
                border-color: #555 !important;
            }

            body.dark-mode .btn-outline-primary, body.dark-mode .btn-outline-success, body.dark-mode .btn-secondary, body.dark-mode .btn-outline-info {
                color: #bbb !important;
                border-color: #666 !important;
            }

                body.dark-mode .btn-outline-primary:hover, body.dark-mode .btn-outline-success:hover, body.dark-mode .btn-secondary:hover, body.dark-mode .btn-outline-info:hover {
                    background-color: #444 !important;
                    border-color: #888 !important;
                }

        .form-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .field-row {
            justify-content: center;
            align-items: center;
            max-width: 800px;
            width: 100%;
        }

        #inputList {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #gs1StringPreview {
            white-space: pre-wrap;
            word-break: break-all;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container py-5">
        <div class="card shadow p-4 position-relative">
            <button id="darkModeToggle" class="btn btn-sm btn-outline-secondary position-absolute" style="top: 1rem; right: 1rem;">
                🌙
            </button>
            <h2 class="mb-4 text-center">📦 GS1 Label Builder</h2>
            <div class="form-container">
                <div class="mb-3 d-flex justify-content-center align-items-center gap-3">
                    <select id="presetSelector" class="form-select w-auto">
                        <option value="">-- Select a Template --</option>
                        @if (ViewBag.Presets != null)
                        {
                            foreach (var preset in (Dictionary<string, List<string>>)ViewBag.Presets)
                            {
                                <option value="@preset.Key">@preset.Key</option>
                            }
                        }
                    </select>
                    <span>OR</span>
                    <label for="jsonUpload" class="btn btn-outline-info btn-sm">Upload File</label>
                    <input type="file" id="jsonUpload" accept=".json" style="display: none;" />
                </div>
                <form method="post" action="/Home/Submit" id="gs1Form" novalidate>
                    @Html.AntiForgeryToken()
                    <div id="inputList" class="mb-4"></div>
                    <div class="text-center mb-3">
                        <button type="submit" class="btn btn-outline-success">✅ Generate Label & PDF</button>
                    </div>
                </form>
                <hr />
                <div id="previewSection" style="display: none;">
                    <h4 class="text-center">Live Preview</h4>
                    <div class="mt-3">
                        <!-- GS1 String (full width) -->
                        <div class="mb-3">
                            <strong>GS1 String:</strong>
                            <pre id="gs1StringPreview" class="p-2 border rounded"></pre>
                        </div>
                        <!-- QR Code (centered) -->
                        <div class="mb-3 text-center">
                            <strong>QR Code:</strong><br />
                            <div id="qrCodePreview" class="p-2 border rounded d-inline-block bg-white"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="resultModal" tabindex="-1" aria-labelledby="resultModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resultModalLabel">Generated GS1 Label</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <img id="modalBarcodeImage" src="" class="img-fluid" style="max-width: 400px; height: 100px;" alt="Barcode" />
                    </div>
                    <div class="row align-items-center">
                        <div class="col-md-9">
                            <strong>GS1 Data String:</strong>
                            <pre id="modalGs1String" class="p-2 border rounded" style="white-space: pre-wrap; word-break: break-all;"></pre>

                            <strong>Data Summary:</strong>
                            <div id="modalSummaryTableContainer" style="max-height: 200px; overflow-y: auto;">
                                <!-- The summary table will be generated here by JavaScript -->
                            </div>
                        </div>
                        <div class="col-md-3 text-center">
                            <strong>QR Code:</strong><br />
                            <img id="modalQrImage" src="" class="img-fluid" alt="QR Code" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="downloadPdfButton">Download PDF</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // --- DATA AND CONFIGURATION ---
        let counter = 0;
        let qrCodeInstance = null;
        const gs1Options = [
            // --- Core Identifiers ---
            { text: "Serial Shipping Container Code (SSCC) (00)", value: "sscc", tooltip: "Logistics unit unique ID (18 digits, numeric)" },
            { text: "Global Trade Item Number GTIN (01)", value: "GTIN", tooltip: "Product identifier (14 digits, numeric)" },
            { text: "GTIN of Contained Trade Items (02)", value: "gtinContained", tooltip: "Contained item GTIN (14 digits, numeric)" },
            { text: "Batch/Lot Number (10)", value: "batch_lotNumber", tooltip: "Batch or lot number (up to 20 alphanumeric)" },
            { text: "Production Date (11)", value: "productionDate", tooltip: "Production date (YYMMDD, 6 digits)" },
            { text: "Due Date (12)", value: "dueDate", tooltip: "Due date (YYMMDD, 6 digits)" },
            { text: "Packaging Date (13)", value: "packDate", tooltip: "Packaging date (YYMMDD, 6 digits)" },
            { text: "Best Before Date (15)", value: "bestBeforeDate", tooltip: "Best before date (YYMMDD, 6 digits)" },
            { text: "Expiration Date (17)", value: "expirationDate", tooltip: "Expiration date (YYMMDD, 6 digits)" },
            { text: "Product Variant (20)", value: "productVariant", tooltip: "Product variant (2 digits numeric)" },
            { text: "Serial Number (21)", value: "serialNumber", tooltip: "Unique serial number (up to 20 alphanumeric)" },
            { text: "Health Care GTIN (22)", value: "healthCareGTIN", tooltip: "Healthcare GTIN (up to 18 digits numeric)" },
            { text: "Pharma Lot Number (241)", value: "pharmaLotNumber", tooltip: "Pharma lot number (up to 30 alphanumeric)" },
            { text: "Additional Product ID (242)", value: "additionalProductID", tooltip: "Additional product ID (up to 30 alphanumeric)" },
            { text: "Customer Part Number (243)", value: "customerPartNumber", tooltip: "Customer part number (up to 30 alphanumeric)" },
            { text: "Made-to-Order Variation Number (250)", value: "madeToOrderVariation", tooltip: "Custom variation number (up to 6 digits numeric)" },
            { text: "Secondary Serial Number (251)", value: "secondarySerialNumber", tooltip: "Additional serial number (up to 30 alphanumeric)" },
            { text: "Global Document Type Identifier (GDTI) (253)", value: "gdti", tooltip: "Document ID (13 digits + up to 17 alphanumeric)" },
            { text: "Global Coupon Number (GCN) (255)", value: "gcn", tooltip: "Coupon number (13 digits + up to 12 digits numeric)" },
            { text: "Variable Measure Count (30)", value: "variableCount", tooltip: "Number of trade items (up to 8 digits numeric)" },
            { text: "Count of Contained Trade Items (37)", value: "countContained", tooltip: "Items contained (up to 8 digits numeric)" },

            // --- Measurements (Net, Metric) ---
            { text: "Net Weight (kg) (3102)", value: "netWeightKg", tooltip: "Net weight in kg (6 digits, 2 decimal places)" },
            { text: "Length (m) (3112)", value: "lengthM", tooltip: "Length in meters (6 digits, 2 decimal places)" },
            { text: "Width (m) (3122)", value: "widthM", tooltip: "Width in meters (6 digits, 2 decimal places)" },
            { text: "Depth (m) (3132)", value: "depthM", tooltip: "Depth in meters (6 digits, 2 decimal places)" },
            { text: "Area (m²) (3142)", value: "areaSqM", tooltip: "Area in square meters (6 digits, 2 decimal places)" },
            { text: "Net Volume (L) (3152)", value: "netVolumeL", tooltip: "Net volume in liters (6 digits, 2 decimal places)" },
            { text: "Net Volume (m³) (3162)", value: "netVolumeM3", tooltip: "Net volume in cubic meters (6 digits, 2 decimal places)" },

            // --- Measurements (Net, Imperial) ---
            { text: "Net Weight (lb) (3202)", value: "netWeightLb", tooltip: "Net weight in pounds (6 digits, 2 decimal places)" },
            { text: "Length (in) (3212)", value: "lengthIn", tooltip: "Length in inches (6 digits, 2 decimal places)" },
            { text: "Width (in) (3222)", value: "widthIn", tooltip: "Width in inches (6 digits, 2 decimal places)" },
            { text: "Depth (in) (3232)", value: "depthIn", tooltip: "Depth in inches (6 digits, 2 decimal places)" },
            { text: "Area (in²) (3242)", value: "areaSqIn", tooltip: "Area in square inches (6 digits, 2 decimal places)" },
            { text: "Net Volume (US gal) (3252)", value: "netVolumeUSGal", tooltip: "Net volume in US gallons (6 digits, 2 decimal places)" },
            { text: "Net Volume (cubic in) (3262)", value: "netVolumeCubicIn", tooltip: "Net volume in cubic inches (6 digits, 2 decimal places)" },

            // --- Measurements (Gross, Metric) ---
            { text: "Gross Weight (kg) (3302)", value: "grossWeightKg", tooltip: "Gross weight in kilograms (6 digits, 2 decimal places)" },
            { text: "Gross Length (m) (3312)", value: "lengthGrossM", tooltip: "Gross length in meters (6 digits, 2 decimal places)" },
            { text: "Gross Width (m) (3322)", value: "widthGrossM", tooltip: "Gross width in meters (6 digits, 2 decimal places)" },
            { text: "Gross Depth (m) (3332)", value: "depthGrossM", tooltip: "Gross depth in meters (6 digits, 2 decimal places)" },
            { text: "Gross Area (m²) (3342)", value: "areaGrossSqM", tooltip: "Gross area in square meters (6 digits, 2 decimal places)" },
            { text: "Gross Volume (L) (3352)", value: "grossVolumeL", tooltip: "Gross volume in liters (6 digits, 2 decimal places)" },
            { text: "Gross Volume (m³) (3362)", value: "grossVolumeM3", tooltip: "Gross volume in cubic meters (6 digits, 2 decimal places)" },

            // --- Measurements (Gross, Imperial) ---
            { text: "Gross Weight (lb) (3402)", value: "grossWeightLb", tooltip: "Gross weight in pounds (6 digits, 2 decimal places)" },
            { text: "Gross Length (in) (3412)", value: "lengthGrossIn", tooltip: "Gross length in inches (6 digits, 2 decimal places)" },
            { text: "Gross Width (in) (3422)", value: "widthGrossIn", tooltip: "Gross width in inches (6 digits, 2 decimal places)" },
            { text: "Gross Depth (in) (3432)", value: "depthGrossIn", tooltip: "Gross depth in inches (6 digits, 2 decimal places)" },
            { text: "Gross Area (in²) (3442)", value: "areaGrossSqIn", tooltip: "Gross area in square inches (6 digits, 2 decimal places)" },
            { text: "Gross Volume (US gal) (3452)", value: "grossVolumeUSGal", tooltip: "Gross volume in US gallons (6 digits, 2 decimal places)" },
            { text: "Gross Volume (cubic in) (3462)", value: "grossVolumeCubicIn", tooltip: "Gross volume in cubic inches (6 digits, 2 decimal places)" },

            // --- Other Measurements ---
            { text: "Area (ft²) (3472)", value: "areaSqFt", tooltip: "Area in square feet (6 digits, 2 decimal places)" },
            { text: "Length (ft) (3482)", value: "lengthFt", tooltip: "Length in feet (6 digits, 2 decimal places)" },
            { text: "Width (ft) (3492)", value: "widthFt", tooltip: "Width in feet (6 digits, 2 decimal places)" },
            { text: "Depth (ft) (3502)", value: "depthFt", tooltip: "Depth in feet (6 digits, 2 decimal places)" },
            { text: "Gross Weight, Metric Tons (3512)", value: "grossWeightMetricTon", tooltip: "Gross weight in metric tons (6 digits, 2 decimal places)" },
            { text: "Net Weight, Metric Tons (3522)", value: "netWeightMetricTon", tooltip: "Net weight in metric tons (6 digits, 2 decimal places)" },
            { text: "Net Volume, Cubic Feet (3532)", value: "netVolumeCubicFt", tooltip: "Net volume in cubic feet (6 digits, 2 decimal places)" },
            { text: "Net Volume, Quarts (3542)", value: "netVolumeQt", tooltip: "Net volume in quarts (6 digits, 2 decimal places)" },
            { text: "Net Weight, Ounces (3552)", value: "netWeightOz", tooltip: "Net weight in ounces (6 digits, 2 decimal places)" },
            { text: "Net Volume, US Fluid Ounces (3562)", value: "netVolumeUSFlOz", tooltip: "Net volume in US fluid ounces (6 digits, 2 decimal places)" },
            { text: "Net Volume, Imperial Gallons (3572)", value: "netVolumeImpGal", tooltip: "Net volume in imperial gallons (6 digits, 2 decimal places)" },
            { text: "Net Volume, Imperial Fluid Ounces (3582)", value: "netVolumeImpFlOz", tooltip: "Net volume in imperial fluid ounces (6 digits, 2 decimal places)" },
            { text: "Net Volume, Cubic Yards (3592)", value: "netVolumeCubicYd", tooltip: "Net volume in cubic yards (6 digits, 2 decimal places)" },
            { text: "Net Volume, US Pints (3602)", value: "netVolumeUSPint", tooltip: "Net volume in US pints (6 digits, 2 decimal places)" },
            { text: "Net Volume, US Quarts (3612)", value: "netVolumeUSQt", tooltip: "Net volume in US quarts (6 digits, 2 decimal places)" },
            { text: "Net Volume, Imperial Pints (3622)", value: "netVolumeImpPint", tooltip: "Net volume in imperial pints (6 digits, 2 decimal places)" },
            { text: "Net Volume, Imperial Quarts (3632)", value: "netVolumeImpQt", tooltip: "Net volume in imperial quarts (6 digits, 2 decimal places)" },
            { text: "Net Volume, Liters Per 100 kg (3642)", value: "netVolumeLitPer100Kg", tooltip: "Net volume liters per 100 kg (6 digits, 2 decimal places)" },

            // --- Amounts and Consumer Units ---
            { text: "Number of Consumer Units (3900)", value: "numConsumerUnits", tooltip: "Number of consumer units (up to 8 digits numeric)" },
            { text: "Amount Payable (3902)", value: "amountPayable", tooltip: "Amount payable, no currency code (up to 15 digits, 2 decimal places)" },
            { text: "Amount Payable with ISO Currency (3903)", value: "amountPayableISO", tooltip: "Amount payable with 3-digit ISO currency code" },
            { text: "Amount Payable, Variable (3912)", value: "amountPayableVar", tooltip: "Amount payable (no currency), variable measure" },
            { text: "Amount Payable, Variable with ISO (3913)", value: "amountPayableVarISO", tooltip: "Amount payable with ISO code, variable measure" },

            // --- Logistics and Party Information ---
            { text: "Customer Purchase Order Number (400)", value: "customerPONumber", tooltip: "Customer PO number (up to 30 alphanumeric)" },
            { text: "Consignment Number (401)", value: "consignmentNumber", tooltip: "Consignment number (up to 30 alphanumeric)" },
            { text: "Global Shipment ID (GSIN) (402)", value: "gsin", tooltip: "Shipment ID (17 digits numeric)" },
            { text: "Routing Code (403)", value: "routingCode", tooltip: "Routing code (up to 30 alphanumeric)" },
            { text: "GLN - Ship To (410)", value: "shipTo", tooltip: "Delivery location GLN (13 digits numeric)" },
            { text: "GLN - Bill To (411)", value: "billTo", tooltip: "Billing location GLN (13 digits numeric)" },
            { text: "GLN - Purchase From (412)", value: "purchaseFrom", tooltip: "Purchasing party GLN (13 digits numeric)" },
            { text: "GLN - Forward To (413)", value: "forwardTo", tooltip: "Forwarding location GLN (13 digits numeric)" },
            { text: "GLN - Physical Location (414)", value: "physicalLoc", tooltip: "General physical location GLN (13 digits numeric)" },
            { text: "GLN - Invoicing Party (415)", value: "invoicingParty", tooltip: "Invoicing party GLN (13 digits numeric)" },
            { text: "Ship To Postal Code (420)", value: "shipToPost", tooltip: "Postal code (up to 20 alphanumeric)" },
            { text: "Ship To Postal Code with ISO (421)", value: "shipToPostWithIso", tooltip: "Postal code + ISO country code" },
            { text: "Country of Origin (422)", value: "origin", tooltip: "Country of origin ISO code (3 digits numeric)" },
            { text: "Initial Processing Country (423)", value: "initialProcessingCountry", tooltip: "Countries of initial processing (ISO codes)" },
            { text: "Processing Country (424)", value: "processingCountry", tooltip: "Country of processing (ISO code)" },
            { text: "Disassembly Country (425)", value: "disassemblyCountry", tooltip: "Country of disassembly (ISO code)" },
            { text: "Full Process Country (426)", value: "fullProcessCountry", tooltip: "Country of full process chain (ISO code)" },
            { text: "Expiration Date/Time (427)", value: "expirationDateTime", tooltip: "Expiration date and time (YYMMDDHH, 8 digits)" },

            // --- Additional Information ---
            { text: "Component/Part Structure (7001)", value: "componentStructure", tooltip: "Component structuring number (up to 30 alphanumeric)" },
            { text: "Production URL (8001)", value: "prodUrl", tooltip: "Product information URL (up to 200 characters)" },
            { text: "Product Characteristics (8002)", value: "prodCharacteristics", tooltip: "Product characteristics (up to 50 alphanumeric)" },
            { text: "Healthcare Class (8018)", value: "healthcareClass", tooltip: "Healthcare classification codes (up to 20 alphanumeric)" },
            { text: "Product Data Status (8020)", value: "prodDataStatus", tooltip: "Product data status (up to 20 alphanumeric)" },
            { text: "Shelf Life Duration (8100)", value: "shelfLifeDuration", tooltip: "Shelf life in days (up to 6 digits)" },
        ];
        const presets = @Html.Raw(Json.Encode(ViewBag.Presets ?? new Dictionary<string, List<string>>()));

        // --- VALIDATION RULES (RESTORED) ---
        const fieldValidationRules = {
            sscc: { pattern: /^\d{18}$/, message: "SSCC must be exactly 18 digits." },
            GTIN: { customValidator: validateGTIN, message: "Invalid GTIN. Check length and check digit." },
            gtinContained: { customValidator: validateGTIN, message: "Invalid GTIN. Check length and check digit." },
            batch_lotNumber: { pattern: /^[a-zA-Z0-9-]{1,20}$/, message: "Must be 1-20 alphanumeric characters." },
            serialNumber: { pattern: /^[a-zA-Z0-9]{1,20}$/, message: "Must be 1-20 alphanumeric characters." },
            productionDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            dueDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            packDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            bestBeforeDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            expirationDate: { customValidator: isValidYYMMDD, message: "Date must be a valid YYMMDD date." },
            customerPONumber: { pattern: /^[a-zA-Z0-9-]{1,30}$/, message: "PO Number must be 1-30 alphanumeric characters or hyphens." },
            gsin: { pattern: /^\d{17}$/, message: "GSIN must be exactly 17 digits." },
            shelfLifeDuration: { pattern: /^\d{1,6}$/, message: "Must be 1-6 digits." },
        };

        // --- VALIDATION FUNCTIONS (RESTORED) ---
        function validateGTIN(gtin) {
            if (!/^\d{8}$|^\d{12}$|^\d{13}$|^\d{14}$/.test(gtin)) return false;
            const a = gtin.slice(0, -1).split('').map(char => parseInt(char, 10));
            const checkDigit = parseInt(gtin.slice(-1), 10);
            let sum = 0;
            a.reverse().forEach((digit, i) => { sum += digit * (i % 2 === 0 ? 3 : 1); });
            return checkDigit === (10 - (sum % 10)) % 10;
        }

        function isValidYYMMDD(value) {
            if (!/^\d{6}$/.test(value)) return false;
            const year = parseInt(value.slice(0, 2), 10) + 2000;
            const month = parseInt(value.slice(2, 4), 10);
            const day = parseInt(value.slice(4, 6), 10);
            if (month < 1 || month > 12) return false;
            const lastDayOfMonth = new Date(year, month, 0).getDate();
            return !(day < 1 || day > lastDayOfMonth);
        }

        function validateInput(input, fieldName) {
            const value = input.value.trim();
            const msg = input.parentNode.querySelector('.validation-msg');
            const rules = fieldValidationRules[fieldName];
            if (!rules) {
                msg.style.display = "none";
                input.classList.remove("is-invalid");
                return;
            }
            let isValid = true;
            let validationMessage = rules.message || "Invalid format.";
            if (rules.customValidator) {
                isValid = rules.customValidator(value);
            } else if (rules.pattern) {
                isValid = rules.pattern.test(value);
            }
            if (!isValid) {
                msg.innerText = validationMessage;
                msg.style.display = "block";
                input.classList.add("is-invalid");
            } else {
                msg.style.display = "none";
                input.classList.remove("is-invalid");
            }
        }

        // --- CORE UI FUNCTIONS ---
        function buildFormForPreset(presetName) {
            const inputList = document.getElementById('inputList');
            inputList.innerHTML = "";
            if (!presetName) {
                updatePreview();
                return;
            }
            const fieldsForPreset = presets[presetName];
            if (!fieldsForPreset) return;
            counter = 0;
            fieldsForPreset.forEach(fieldValue => {
                const fieldInfo = gs1Options.find(opt => opt.value === fieldValue);
                if (!fieldInfo) return;
                const div = document.createElement('div');
                div.className = "row g-2 align-items-center mb-3 field-row";
                div.setAttribute('data-index', counter);
                const labelHTML = `<div class="col-md-5"><input type="text" class="form-control" value="${fieldInfo.text}" readonly title="${fieldInfo.tooltip || ''}"/><input type="hidden" name="inputs[${counter}].Field" value="${fieldInfo.value}" /></div>`;
                const inputHTML = `<div class="col-md-7"><input type="text" class="form-control" name="inputs[${counter}].Value" placeholder="Enter value" data-field="${fieldValue}" oninput="validateInput(this, '${fieldValue}'); updatePreview()" /><small class="text-danger validation-msg" style="display:none"></small></div>`;
                div.innerHTML = labelHTML + inputHTML;
                inputList.appendChild(div);
                counter++;
            });
            updatePreview();
        }

        function updatePreview() {
            const previewSection = document.getElementById('previewSection');
            const inputs = document.querySelectorAll('#inputList input[data-field]');

            if (inputs.length === 0) {
                previewSection.style.display = 'none';
                return;
            }

            const parts = [];
            inputs.forEach(input => {
                const fieldName = input.getAttribute('data-field');
                const value = input.value.trim();
                const fieldInfo = gs1Options.find(opt => opt.value === fieldName);
                if (value && fieldInfo) {
                    const aiMatch = fieldInfo.text.match(/\((\d+)\)$/);
                    if (aiMatch) {
                        const ai = aiMatch[1];
                        parts.push(`(${ai})${value}`);
                    }
                }
            });
            const gs1Data = parts.join('');

   

            const gs1StringElem = document.getElementById('gs1StringPreview');
            const qrCodeDiv = document.getElementById('qrCodePreview');


            gs1StringElem.textContent = gs1Data;
            qrCodeDiv.innerHTML = ''; 

            if (gs1Data) {
                previewSection.style.display = 'block';


                new QRCode(qrCodeDiv, {
                    text: gs1Data,
                    width: 128,
                    height: 128,
                    correctLevel: QRCode.CorrectLevel.Q 
                });

            } else {

                previewSection.style.display = 'none';
            }
        }

        // --- EVENT LISTENERS ---
        document.getElementById('presetSelector').addEventListener('change', function () {
            buildFormForPreset(this.value);
        });

        document.getElementById('jsonUpload').addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (!file) return;
            const reader = new FileReader();
            reader.onload = function (e) {
                try {
                    const uploadedPresets = JSON.parse(e.target.result);
                    const selector = document.getElementById('presetSelector');
                    for (const presetName in uploadedPresets) {
                        if (!presets[presetName]) {
                            presets[presetName] = uploadedPresets[presetName];
                            const option = document.createElement('option');
                            option.value = presetName;
                            option.textContent = presetName + " (Uploaded)";
                            selector.appendChild(option);
                        }
                    }
                    alert(Object.keys(uploadedPresets).length + ' preset(s) loaded successfully!');
                } catch (error) {
                    alert('Error parsing JSON file: ' + error.message);
                }
            };
            reader.readAsText(file);
            event.target.value = '';
        });
        document.getElementById('gs1Form').addEventListener('submit', function (e) {
            e.preventDefault();


            let isFormValid = true;
            const inputs = document.querySelectorAll('#inputList input[data-field]');
            if (inputs.length === 0) {
                alert('Please select a template to generate a label.');
                return;
            }
            for (let input of inputs) {
                const fieldName = input.getAttribute('data-field');
                validateInput(input, fieldName);
                if (input.classList.contains('is-invalid') || input.value.trim() === '') {
                    isFormValid = false;
                }
            }
            if (!isFormValid) {
                alert('Please fix all invalid or empty fields before submitting.');
                return;
            }



            const submitButton = e.target.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';


            const formData = new FormData(e.target);

            fetch('/Home/Submit', {
                method: 'POST',
                body: formData // <-- Send the FormData object directly
            })
                .then(response => {
                    if (!response.ok) {
                        // Check if the response is the yellow screen of death (HTML) or a JSON error
                        const contentType = response.headers.get("content-type");
                        if (contentType && contentType.indexOf("application/json") !== -1) {
                            return response.json().then(data => { throw new Error(data.message || 'An unknown error occurred.') });
                        } else {
                            return response.text().then(text => { throw new Error('Server returned an unexpected response. Please check the console.') });
                        }
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // ... your existing success logic for populating the modal ...
                        document.getElementById('modalGs1String').textContent = data.gs1String;
                        document.getElementById('modalBarcodeImage').src = data.barcodeImage;
                        document.getElementById('modalQrImage').src = data.qrImage;
                        const tableContainer = document.getElementById('modalSummaryTableContainer');
                        tableContainer.innerHTML = buildSummaryTable(data.modelData);
                        const resultModal = new bootstrap.Modal(document.getElementById('resultModal'));
                        resultModal.show();
                        document.getElementById('downloadPdfButton').onclick = function () {
                            downloadPdf(data.gs1String, data.barcodeImage.replace("data:image/png;base64,", ""), data.qrImage.replace("data:image/png;base64,", ""));
                        };
                    } else {
                        alert('Error from server: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                    alert('An error occurred while generating the label:\n' + error.message);
                })
                .finally(() => {
                    submitButton.disabled = false;
                    submitButton.innerHTML = '✅ Generate Label & PDF';
                });
        });

        document.addEventListener('DOMContentLoaded', () => {
            setDarkMode(localStorage.getItem('darkMode') === 'true');
        });

        const toggleBtn = document.getElementById('darkModeToggle');
        toggleBtn.addEventListener('click', () => {
            setDarkMode(!document.body.classList.contains('dark-mode'));
        });

        function setDarkMode(enabled) {
            if (enabled) {
                document.body.classList.add('dark-mode');
                localStorage.setItem('darkMode', 'true');
                toggleBtn.textContent = '☀️';
            } else {
                document.body.classList.remove('dark-mode');
                localStorage.setItem('darkMode', 'false');
                toggleBtn.textContent = '🌙';
            }
        }

        function buildSummaryTable(modelData) {
            let tableHtml = '<table class="table table-sm table-bordered"><tbody>';
            for (const key in modelData) {
                if (modelData[key]) { // Check if the property has a value
                    const fieldInfo = gs1Options.find(opt => opt.value === key);
                    const displayName = fieldInfo ? fieldInfo.text : key; // Use friendly name if available
                    tableHtml += `<tr><td class="w-50">${displayName}</td><td>${modelData[key]}</td></tr>`;
                }
            }
            tableHtml += '</tbody></table>';
            return tableHtml;
        }

        function downloadPdf(gs1String, barcodeBase64, qrBase64) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Home/ExportPdf';

            // --- ANTI-FORGERY TOKEN LOGIC ---

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const tokenField = document.createElement('input');
            tokenField.type = 'hidden';
            tokenField.name = '__RequestVerificationToken';
            tokenField.value = token;
            form.appendChild(tokenField);

            const params = {
                gs1String: gs1String,
                barcodeBase64: barcodeBase64.replace("data:image/png;base64,", ""),
                qrBase64: qrBase64.replace("data:image/png;base64,", "")
            };

            for (const key in params) {
                const hiddenField = document.createElement('input');
                hiddenField.type = 'hidden';
                hiddenField.name = key;
                hiddenField.value = params[key];
                form.appendChild(hiddenField);
            }

            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        }
    </script>
</body>
</html>