@model List<gs1BarcodeApplication.Models.ProductLabelModel>
@{
    ViewBag.Title = "GS1 Generator";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>

    <meta charset="utf-8" />
    <title>GS1 Label Generator</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />

    <style>
        body.dark-mode {
            background-color: #121212 !important;
            color: #e0e0e0 !important;
        }

            body.dark-mode .card {
                background-color: #1e1e1e !important;
                color: #e0e0e0 !important;
            }

            body.dark-mode .form-control {
                background-color: #333 !important;
                color: #eee !important;
                border-color: #555 !important;
            }

            body.dark-mode .btn-outline-primary,
            body.dark-mode .btn-outline-success,
            body.dark-mode .btn-secondary {
                color: #bbb !important;
                border-color: #666 !important;
            }

                body.dark-mode .btn-outline-primary:hover,
                body.dark-mode .btn-outline-success:hover,
                body.dark-mode .btn-secondary:hover {
                    background-color: #444 !important;
                    border-color: #888 !important;
                }
    </style>

</head>
<body class="bg-light">
    <div class="container py-5">
        <div class="card shadow p-4">
            <h2 class="mb-4">📦 Dynamic GS1 Label Builder</h2>
            <button id="darkModeToggle" class="btn btn-secondary mb-3">🌙 Toggle Dark Mode</button>
            <form method="post" action="/Home/Submit" id="gs1Form">
                <div id="inputList" class="mb-3"></div>

                <button id="addBtn" type="button" class="btn btn-outline-primary mb-3" onclick="addField()">➕ Add Field</button>
                <button type="submit" class="btn btn-outline-success mb-3">✅ Submit</button>
            </form>
        </div>
    </div>

    <script>
        let counter = 0;
        const usedFields = new Set();

        const gs1Options = [
            { text: "GTIN (01)", value: "GTIN", tooltip: "Global Trade Item Number – 14 digits" },
            { text: "Batch / Lot Number (10)", value: "batch_lotNumber", tooltip: "Manufacturer's batch or lot code" },
            { text: "Production Date (11)", value: "productionDate", tooltip: "Format: YYMMDD" },
            { text: "Best Before Date (15)", value: "bestBeforeDate", tooltip: "Date for optimal quality (YYMMDD)" },
            { text: "Expiration Date (17)", value: "expirationDate", tooltip: "Date after which product should not be used (YYMMDD)" },
            { text: "Serial Number (21)", value: "serialNumber", tooltip: "Unique item serial number" },
            { text: "Variable Count (30)", value: "veriableCount", tooltip: "Variable quantity of items" },
            { text: "Net Weight - kg (3102)", value: "netWeight", tooltip: "Net weight in kilograms" },
            { text: "Net Volume - L (3152)", value: "netVolume", tooltip: "Net volume in liters" },
            { text: "Width - ft (3252)", value: "width", tooltip: "Width in feet" },
            { text: "Net Weight - oz (3562)", value: "netWeightUS", tooltip: "Weight in ounces" },
            { text: "Net Volume - qt (3602)", value: "netVolumeUS", tooltip: "Volume in quarts" },
            { text: "Amount Payable (3902)", value: "amaountPayable", tooltip: "Total cost to be paid in currency" },
            { text: "Customer PO Number (400)", value: "customerPONumber", tooltip: "Customer’s Purchase Order number" }
        ];

        const fieldValidationRules = {
            GTIN: {
                pattern: /^\d{14}$/,
                message: "GTIN must be exactly 14 digits."
            },
            productionDate: {
                pattern: /^\d{6}$/,
                message: "Date must be in YYMMDD format."
            },
            bestBeforeDate: {
                pattern: /^\d{6}$/,
                message: "Date must be in YYMMDD format."
            },
            expirationDate: {
                pattern: /^\d{6}$/,
                message: "Date must be in YYMMDD format."
            },
            serialNumber: {
                pattern: /^[a-zA-Z0-9]{5,30}$/,
                message: "Serial number should be 5–30 characters."
            },
            veriableCount: {
                pattern: /^\d+$/,
                message: "Must be a number."
            },
            netWeight: {
                pattern: /^\d+(\.\d{1,3})?$/,
                message: "Enter a valid weight (kg), e.g. 2.5"
            },
            netVolume: {
                pattern: /^\d+(\.\d{1,3})?$/,
                message: "Enter a valid volume (liters)"
            },
            width: {
                pattern: /^\d+(\.\d{1,2})?$/,
                message: "Width must be numeric (feet)"
            },
            netWeightUS: {
                pattern: /^\d+(\.\d{1,3})?$/,
                message: "Weight in ounces (oz)"
            },
            netVolumeUS: {
                pattern: /^\d+(\.\d{1,3})?$/,
                message: "Volume in quarts (qt)"
            },
            amaountPayable: {
                pattern: /^\d+(\.\d{2})?$/,
                message: "Enter a valid amount (e.g., 99.99)"
            },
            customerPONumber: {
                pattern: /^[a-zA-Z0-9\-]{4,30}$/,
                message: "PO Number should be 4–30 characters"
            },
            batch_lotNumber: {
                pattern: /^[a-zA-Z0-9]{3,30}$/,
                message: "Batch/Lot number should be 3–30 characters"
            }
        };



        function addField() {
            // Prevent if all fields are used
            if (usedFields.size === gs1Options.length) {
                alert("All GS1 fields have been used.");
                return;
            }

            // Prevent adding if any dropdown is unselected
            const dropdowns = document.querySelectorAll('select');
            for (let d of dropdowns) {
                if (!d.value) {
                    alert("Please select a GS1 field before adding a new one.");
                    return;
                }
            }

            const div = document.createElement('div');
            div.className = "row g-2 align-items-center mb-3";
            div.setAttribute('data-index', counter);

            const availableOptions = gs1Options.filter(opt => !usedFields.has(opt.value));

            const selectHTML = `
        <div class="col-md-5">
            <select class="form-select" name="inputs[${counter}].Field"
                    onchange="onFieldChange(this, ${counter})"
                    data-bs-toggle="tooltip" title="Select a GS1 field">
                <option value="">Select GS1 Field</option>
                ${availableOptions.map(opt =>
                    `<option value="${opt.value}" title="${opt.tooltip}">${opt.text}</option>`).join('')}
            </select>
        </div>
    `;

            const inputHTML = `
        <div class="col-md-5">
            <input type="text"
                   class="form-control"
                   name="inputs[${counter}].Value"
                   placeholder="Enter value"
                   disabled
                   oninput="validateInput(this, '')"
                   data-field="" />
            <small class="text-danger validation-msg" style="display:none"></small>
        </div>
        <div class="col-md-2">
            <button type="button" class="btn btn-outline-danger" onclick="removeField(this)">Remove</button>
        </div>
    `;

            div.innerHTML = selectHTML + inputHTML;
            document.getElementById("inputList").appendChild(div);

            // Bootstrap 5 tooltips must be re-initialized when elements are added dynamically
            const newTooltip = div.querySelector('[data-bs-toggle="tooltip"]');
            new bootstrap.Tooltip(newTooltip);

            counter++;
            updateAddButtonState();
        }


        function onFieldChange(select, index) {
            const value = select.value;
            const prevField = select.getAttribute('data-prev');
            const input = select.parentNode.nextElementSibling.querySelector('input');
            const msg = select.parentNode.nextElementSibling.querySelector('.validation-msg');

            if (prevField) usedFields.delete(prevField);
            if (value) {
                usedFields.add(value);
                input.disabled = false;
                input.setAttribute("data-field", value);
                input.oninput = () => validateInput(input, value); // connect live validation
            } else {
                input.disabled = true;
                input.removeAttribute("data-field");
                msg.style.display = "none";
            }

            select.setAttribute('data-prev', value);
            updateAddButtonState();
        }

        function removeField(btn) {
            const div = btn.closest('.row');
            const field = div.querySelector('select').value;
            if (field) usedFields.delete(field);
            div.remove();
            updateAddButtonState();
        }

        function updateAddButtonState() {
            const allFieldsSelected = Array.from(document.querySelectorAll('select'))
                .every(sel => sel.value !== "");

            document.getElementById('addBtn').disabled = !allFieldsSelected || usedFields.size === gs1Options.length;
        }

        function validateInput(input, fieldName) {
            const rules = fieldValidationRules[fieldName];
            const msg = input.parentNode.querySelector('.validation-msg');

            if (!rules) return;

            if (!rules.pattern.test(input.value.trim())) {
                msg.innerText = rules.message;
                msg.style.display = "block";
                input.classList.add("is-invalid");
            } else {
                msg.style.display = "none";
                input.classList.remove("is-invalid");
            }
        }
        const toggleBtn = document.getElementById('darkModeToggle');

        function setDarkMode(enabled) {
            if (enabled) {
                document.body.classList.add('dark-mode');
                localStorage.setItem('darkMode', 'true');
                toggleBtn.textContent = '☀️ Light Mode';
            } else {
                document.body.classList.remove('dark-mode');
                localStorage.setItem('darkMode', 'false');
                toggleBtn.textContent = '🌙 Dark Mode';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const darkModePref = localStorage.getItem('darkMode') === 'true';
            setDarkMode(darkModePref);
        });

        toggleBtn.addEventListener('click', () => {
            setDarkMode(!document.body.classList.contains('dark-mode'));
        });



    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>



    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
